syntax = "proto3";

import "third-party/ent/options/opts.proto";
import "third-party/google/api/annotations.proto";
import "third-party/protoc-gen-openapiv2/options/annotations.proto";

option go_package = "ent-todo/api/user;user";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Echo API";
        version: "1.0";
        description: "test swagger ";
        contact: {
            name: "gRPC-Gateway project";
            url: "https://github.com/grpc-ecosystem/grpc-gateway";
            email: "none@example.com";
        };
        license: {
            name: "BSD 3-Clause License";
            url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};


service UserService {
    rpc Create(User) returns (User) {
        option (google.api.http) = {
            post: "/user/v1/create",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a user";
            operation_id: "createUser";
            tags: "user";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
    }
}

message User {
    option (ent.schema).gen = true;

    int64 id = 1;
    string account = 2;
    string password = 3 [(ent.field) = {immutable: true}];
    string name = 4;
    //    google.protobuf.Timestamp created_at = 5;
    //    google.protobuf.Timestamp updated_at = 6;
    repeated Card card = 7 [(ent.edge) = {}];
    repeated Group groups = 8 [(ent.edge) = {storage_key: {table: "user_group", columns: ["uid", "gid"]}}];
}

message Card {
    option (ent.schema).gen = true;

    int64 id = 1;
    string imei = 2;
    string os_version = 3;
    string os_type = 4;
    int64 user_id = 5;
    User user = 6 [(ent.edge) = {ref: "card", unique: true, field: "user_id",required: true}];
}

message Group {
    option (ent.schema).gen = true;

    int64 id = 1;
    int64 name = 2;
    User user = 3 [(ent.edge) = {ref: "groups"}];
}